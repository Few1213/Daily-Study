1-XMLHttpRequest2.0  新增功能 dttx123
    超时
        xhr.timeout = 2000;
        xhr.ontimeout = function () {}
    上传文件： 
        var  formData = new FormData(表单);
        xhr.send(formData);

        1-只能 post方式
        2-不需要手动设置请求头， 浏览器会自动设置一个合适的请求头 
    监视文件上传进度：
        xhr.upload.onprogress = function (e) {
            value = e.loaded / e.total; 
        }

2-同源 跨域 jsonp  
    同源： 
        协议相同
        域名相同
        端口同源 
    不同源则 跨域， 浏览器对跨域的限制：
        1- 不能共享cookie
        2- 不能操作dom
        3- 不能发送ajax请求 

    
 跨域进行请求方式： jsonp 
    $.ajax({
        。。。
        dataType: 'jsonp',
    })

    jsonp的原理： 
       本质 ：  jsonp 利用script的src属性 来跨域请求服务器 ；
       步骤： 
        1-前端先定义好一个方法，将方法名利用script传递给后台  
        2-后台获取前端传递的方法名，在方法名后拼括号，在括号中填充json数据，
        3-后台将填充好数据方法调用进行返回
        4-浏览器会将后他返回方法调用立即执行，即可获取方法中填充参数
       注意： 
        jsonp 只能用get发送请求 
        jsonp 需要前后配合完成的



        jsonp  json with padding  

        前端
            function say(obj)  {
                //...
            }
            <script src="00.php?callback=say'></script>
        后台
            $_GET['callback'].('. {"name":"zs", "age:18 }.');  // say({"name":"zs", "age:18 }'));

服务器端设置跨域：


3- 阿里百秀：
    前后端博客管理系统； 
    前台页面：
        给所有人看的， 美观， 
        用户具有 预览，点赞， 评论 
    后台页面：
        管理对博客进行管理后台系统
        写日志
        改昵称
        改头像
        删除评论 
        对网站进行增删改查
    

4-项目开发流程 （大致流程）
    1-需求设计
        做这个项目目的： 盈利
            小视频  商机  想法 
        公司leader  产品经理

    2-原型设计
        画原型图 --> 给产品打草稿 
        负责人： 产品经理 

    3-UI设计
        去美化原型图， 切图 
        负责人： UI设计师 

    4-技术选型
        用什么技术做这个项目做合适：
        前端技术选型：html  html5 css2  css3  jquery  vue.js
        后台技术选型：java  php  python 
        数据库技术选型： mysql sqlServer ...

        考虑因素： 开发成本 ， 团队的技术水平； 服务

        负责人： 项目经理 技术总监 


    5-数据库设计
        前端 后台  数据库 
        将数据库表设计好
        负责人： DBA   后台

    6-项目架构设计
        在开发之前，要规范文件和代码 各种格式命名
        1-组织文件结构
        2-组织代码的规范和命名

    7-迭代开发（循环）
        开发
        测试
        开发
        测试
        开发
        测试
        没有bug为止 
        。。。
        项目需求变了...
        
    8-集中测试
        有bug 回到7
        无bug 到9 
        公测：游戏 
        内测：

    9-部署上线：

        将项目有公司内网  移动 公共互联网上；


    浏览器访问服务器的过程：
        1-如果访问后台的静态资源（.html, .css., .js）， 服务器直接将静态资源返回给浏览器进行解析； 

        2-如果访问服务器是动态文件 .php ,  会在服务器中会执行php标签内部点，标签外部代码会被忽略， 
            在php代码执行完成后，会将php执行结果 和 非php代码 一起返回给浏览器，有浏览器进行解析；


    10- 批量修改文件后缀名： ren  *.html  *.php  保存成.bat文件 双击运行！

    11- 封装 要给同php操作数据库函数 
        1- 执行非查询语句行数
        2- 执行查询语句行数  
    

    12-登录思路：
        1- 前端页面： 
            设置 action  method  name 
        2-后台 
            登录的action 指向自己 
            在用户已post方式提交时，获取用户名和密码进行验证（$_POST不会为空）

            验证的逻辑： 
                 //1-获取邮箱和密码
                 //2-判断数据是否为空 ， 如果不为空继续 
                 //3-根据用户名去查询对应密码， 如果查到密码则继续， 
                    如果没有查询到密码，说明用户名不存在
                 //4- 对比 查询密码 和用户输入的密码是否一致 
                    一致： 跳转到首页  成功
                    不一致： 重新登录  失败 

    优化： 在用户输入出错的情况下，保留用户上次输入的用户名

    13-cookie 和 session  配合实现 判断用户之前是否登录过   

    1-cookie特点：
        1-cookie是浏览器中存储数据容器 
        2-cookie中数据可以被同一个网站的多个页面共享 
        3-cookie 容量 4kb左右 
        4-每次向后台发送请求时，浏览器都会将cookie中的数据添加给请求报文，传递给服务器使用 
        5-服务器无法直接操作cookie,但可以设置响应报文， 浏览器会读取响应报文，根据响应报文内容自己去向cookie中添加数据 

    2-session特点：
        1-cookie服务器器中存储数据容器 
        2-cookie中数据可以被同一个网站的多个页面共享 
        3-session在使用之前要先开启 session_start(); 
            session_start(); 
            1- 随机生成一个sessionID 
            2- 在服务器中创建一个session文件 ，文件名 sessionID一样
            3- 将sessionID 通过响应报文传递给浏览器cookie     

        3-cookie  和 session 实现判断用户之前是否登陆过 
            1-在用户登录成功时， 给登录成功的用户添加一个标记， 服务器也会存储用户标记 

            2-判断用户之前是否登录过： 
                判断用户是否携带有之前标记， 如果没有 去登录 
                    判断服务器中是否记录用户的标签，如果有 登录成功； 


            //   1-在用户登录成功时， 给登录成功的用户添加一个标记， 服务器也会存储用户标记 
            if($pwd == $data['password']) {
                //登录成功 
                // 给登录成功的用户添加一个标记， 服务器也会存储用户标记 
                session_start(); 
                $_SESSION['user_id'] = $data['id];
            }

     // 判断用户之前是否登录过（用户登录状态保持）
        1-登录过的用户会有sessionid
        if(empty($_COOKIE['PHPSESSID'])) {
            //没有登录过，去登录
        } else {
            //判断同名session文件中，是否存放用user_id  
            if(empty($_SESSION['user_id'])) {
                //没有 去登录
            } else{
                //登录过 
            }
        }
    
    不要太敏感
    越坚硬东西越脆弱 


    第二天：
    1-侧边栏高亮思路：
        1-侧边栏只有一个，被多个页面引入， 在被不同的页面引入时，侧边栏能够识别当前页面，根据页面的标记让对应导航高亮显示；

        解决方案： 给每个页面添加一个标记；定义$page 变量；


        ctrl + win + d 新建虚拟桌面 
        ctrl + win + 左右箭头 切换  
        win + tab  关闭 和 新建 切换 


    二级导航高亮效果：
        1-大li添加active  深色背景效果 
        2-给ul添加in类名  让ul展开 
        3-去掉 collapsed  让箭头向下 
        4-给小li添加active类名    让自己高亮显示 



    建议： 
        html, css 使用双引号 
        js,php 编程语言中 使用单引号 

        
    
    分页： 
        分页标签的个数，应该是根据后台数据库的数据总数动态生成； 
        在正式做分页标签之前，要查询数据库中评论总数，基于总数来生成分页标签； 
        1-后台要提供要给查询评论总数接口 
            查询有效文章总数：
            有效： 评论所对应文章必须存在 


    在前后端分离情况，阿里百秀 开发顺序
    我们正常思考问题顺序 前端--服务器 --数据库   
    开发顺序是逆向的  
        先将sql准备好
        后台基于sql语句准备接口 
        当接口完成后，前端请求接口，渲染数据；


第三天： 
    1-批准的思路：
        1-前端点击批准按钮， 获取当前数据对应id， 将id传递给后台
        2-后台获取id，根据id更新数据库中对应的数据 
        3-批准完成后，页面重新渲染，看到批准效果


    2-  h5中 建议 自定义属性以 data- 开头，有更好的语义
        标签的自定义属性作用： 存储数据（变量的作用类似）

    3- 用普通的事件，给批准按钮没有绑定上事件，为什么
       批准按钮是动态生成的，当前按钮生成时，普通绑定事件代码早已执行完成； 
       给还没有出生的盒子绑定事件， 用事件委托， 
        -->  先将事件绑定给一个已经存在父元素，将来有子元素进行触发
       语法： $('父元素').on(事件类型， 子元素, function () { })

    4-attr 和prop
    prop 用于 值为bool类型的情况  disabled checked selected 等； 



    5-删除的思路：
        1-点击删除按钮，获取当前数据id, 传递给后台
        2-后台会根据id进行删除
        3-删除完成后，重新渲染当前页，看到删除的效果

    6-删除最后一页问题： 
        每次删除完成后，重新渲染当前页  currentPage = 45;
        45页是最后一页，如果将45页的数据全部删除， 还是请求当前页面； 45页就没有数据了
        服务器当前最大的页面是44；
        解决方案： 
            在每次渲染之前，先判断 currentPage 是否大于数据库中数据的最大页码(maxPage)； 如果大于 是不合理的；
            if(currentPage > maxPage) {
                currentPage = maxPage;
            }

    7-全选功能
     1- 下面所有小复选框的选中状态 和全选按钮一致 
     2- 如果全选按钮选中，则批量按钮显示 否则隐藏 
     onchange 当表单状态(值)发送改变时触发事件 

    8-多选功能
    1-小复选框 全部选中，则全选按钮选中，否则取消 
    2-如果有小复选框被选中，批量按钮显示，否则隐藏


    9- 批量批准
        1-点击批量批准按钮，获取被选中的数据id, 传递给后台
        2-后台根据id进行批量批准
        3-批准完成后， 重新渲染当前页

    10-在每次重新渲染是要重置批量按钮和全选框 


    逻辑线比较长；

    var page = 3; 
    var pageSize = 10; 
    var start = (page - 1) * PageSize;

    //可维护性 语义
    //代码即注释 
    //逻辑分离 ： 低耦合 高内聚

    快捷键： 
    tab  缩进 
    shift + tab 逆缩进


    第四天： 
        1- 查询有效的文章总数
            有效： 文章的作者必须存在   文章必须有分类 
            
        2-  onchange  当表单值发送改变时触发 , 
                      将用户输入前值 和用户输入后的值 进行对应, 在用户输入完成后才触发 


            H5中新增 事件 ：
                    oninput 当用户输入时触发， 实时触发 

        3- 遍历
            php:
                foreach($arr as $k => $v ) { } 

            js数组： 
                arr.forEach(function (v, i) { })

            jq: 
                $('div').each(function( index , ele) {  } )

            模版：
                {{ each list v i }}  {{ /each }}

    4- 限制文件上传类型：
          <input type="file" accept="image/*">

          accept="大类型/小类型";


    5- 时间格式插件  moment.js  
        语法 moment(时间).format(格式);  将时间转成指定的格式 
        格式：  年 YYYY   月：MM  日：DD  小时 ： HH  分钟： mm  秒： ss
        如果不传递时间，默认取系统当前时间； 

    复习： 
        oninput = function () { }  // 当用户输入时触发 
        onchange = function () { } // 当表单值发生改变时触发 

        限制文件上传类型：  
            accept = "image/*";

        本地预览：
        $('input').on('change', function () {
            //1-获取被选中的第一个文件 
            var file =  this.files[0];
            //2-获取图片url
            var url = URL.createObjectURL(file);
            img.src = url; 
        })

        时间格式化 插件 ： moment.js  
        moment(时间).format('YYYY-MM-DDTHH:mm');


第五天： 
    1- 富文本编辑器本质是还是用div拼出来布局 ， 在富文本编辑器中内容，不能被表单提交
     解决方案： 
        用户使用富文本编辑进行输入，可以有好的用户体验 ，  通过代码实时将用户输入的内容同步到textarea ,最终提交的还是textarea中的内容；


    2- 添加文章思路： 
        1-点击保存按钮，通过表单提交数据给后台
        2-后台获取前端提交的数据和文件， 保存到数据库中
        3-保存完成后，跳转到文章列表页，看到最新添加的文章


    3- 修改文章思路：
        1-点击修改按钮，获取当前文章id, 去后台获取对应id的数据， 把数据填充在模态框中， 供用户修改 
        2-修改完成后， 点击保存按钮，将修改后的数据 在更新会数据库即可
        3-文章列表页面重新渲染， 看到修改后结果


    4-jq对象和dom的对象的区别：
        jq对象： $('div')  [div, div, div, div]
        dom:    div   


    5- 在$.ajax中，如果设置请求方式为post  $.ajax 内部默认会设置请求头
        但是FormData是不需要手动设置的    

        解决方案： 让$.ajax 不设置请求头即可； 
        $.ajax({
            type: 'post', 
            data: formData, 
            ....
            contentType: false,  //让$.ajax不在设置请求头
            processData: false,  //数据有FormData进行管理，$.ajax内部不需要在处理数据了；
        })


    第六天： 
        1-DOM提供表单重置方法： 
            reset(); 
        


        
    

            
            


    













    

